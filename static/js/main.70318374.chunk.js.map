{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoForm/TodoForm.js","AppLayout.js","containers/TodoAppContainer/TodoAppContainer.js","App.js","serviceWorker.js","index.js"],"names":["getItemStyles","isCompleted","backgroundColor","opacity","marginTop","TodoItem","_ref","todoItem","onRemoveItem","onSetItemCompleted","completed","react_default","a","createElement","mdbreact_esm","style","Object","objectSpread","className","size","middle","text","dist_default","type","onClick","id","disabled","label","name","aria-label","icon","TodoList","todoItems","map","item","key","defaultProps","TodoForm","onAddItem","_useState","useState","_useState2","slicedToArray","todoText","setTodoText","inputEl","useRef","submitForm","current","state","innerValue","onKeyPress","e","which","ref","onChange","target","value","color","AppLayout","props","Fragment","dark","expand","children","shortid","require","todoReducer","action","concat","toConsumableArray","payload","filter","TodoAppContainer","_useReducer","useReducer","_useReducer2","todos","dispatch","TodoList_TodoList","todoItemText","generate","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAOMA,EAAgB,SAACC,GACrB,OAAIA,EACK,CACLC,gBAAiB,OACjBC,QAAS,MACTC,UAAW,SAGR,CACLA,UAAW,UAIA,SAASC,EAATC,GAAkE,IAA9CC,EAA8CD,EAA9CC,SAAUC,EAAoCF,EAApCE,aAAcC,EAAsBH,EAAtBG,mBACnDR,EAAcM,EAASG,UAE7B,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAkBC,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAOhB,EAAcC,KAC1CU,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQI,UAAU,kBAAkBC,KAAK,KAAKC,QAAM,GACjDb,EAASc,MAEZV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQK,KAAK,IAAID,UAAU,oBACzBP,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAUW,KAAK,WAAWC,QAAS,kBAAMf,EAAmBF,EAASkB,KAAKC,SAAUzB,IACpFU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEK,KAAK,KACLD,UAAU,uBACVS,MAAM,SACNC,KAAK,SACLC,aAAW,SACXL,QAAS,kBAAMhB,EAAaD,EAASkB,KACrCK,KAAK,aCjCjB,SAASC,EAATzB,GAAmE,IAA/C0B,EAA+C1B,EAA/C0B,UAAWxB,EAAoCF,EAApCE,aAAcC,EAAsBH,EAAtBG,mBAC3C,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGkB,EAAUC,IAAI,SAAAC,GAAI,OACjBvB,EAAAC,EAAAC,cAACR,EAAD,CACE8B,IAAKD,EAAKT,GACVlB,SAAU2B,EACV1B,aAAcA,EACdC,mBAAoBA,OD2C9BJ,EAAS+B,aAAe,CACtB7B,SAAU,IC9BZwB,EAASK,aAAe,CACtBJ,UAAW,IAGED,QC1BA,SAASM,EAAT/B,GAAiC,IAAbgC,EAAahC,EAAbgC,UAAaC,EACdC,mBAAS,IADKC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAuB,EAAA,GACvCI,EADuCF,EAAA,GAC7BG,EAD6BH,EAAA,GAExCI,EAAUC,iBAAO,MAEjBC,EAAa,SAAC1B,GACL,KAATA,IACFiB,EAAUjB,GACVuB,EAAY,IACRC,EAAQG,UAASH,EAAQG,QAAQC,MAAMC,WAAa,MAU5D,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEqC,WATY,SAACC,GACD,KAAZA,EAAEC,OACJN,EAAWJ,IAQTxB,KAAK,KACLmC,IAAKT,EACLlB,MAAM,YACN4B,SAAU,SAAAH,GAAC,OAAIR,EAAYQ,EAAEI,OAAOC,QACpCvC,UAAU,cAEZP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQI,UAAU,aAAawC,MAAM,OAAO7B,aAAW,MAAML,QAAS,kBAAMuB,EAAWJ,IAAWpB,KAAK,UACrGZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASgB,KAAK,OAAOX,KAAK,SC7BnB,SAASwC,EAAUC,GAChC,OACEjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACElD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAW4C,MAAM,SAASI,MAAI,EAACC,OAAO,MACpCpD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQK,KAAK,KACXR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,MAAIK,UAAU,SAAd,iBAKRP,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQI,UAAU,aACf0C,EAAMI,YCdjB,IAAMC,EAAUC,EAAQ,IAElBC,EAAc,SAAClB,EAAOmB,GAC1B,OAAQA,EAAO7C,MACb,IAAK,WACH,SAAA8C,OAAArD,OAAAsD,EAAA,EAAAtD,CAAWiC,GAAX,CAAkBmB,EAAOG,UAC3B,IAAK,cACH,OAAOtB,EAAMuB,OAAO,SAAAtC,GAAI,OAAIA,EAAKT,KAAO2C,EAAO3C,KACjD,IAAK,WACH,OAAOwB,EAAMhB,IAAI,SAACC,GAChB,OAAIA,EAAKT,KAAO2C,EAAO3C,GACdT,OAAAC,EAAA,EAAAD,CAAA,GAAKkB,EAAZ,CAAkBxB,WAAW,IAExBwB,IAEX,QACE,OAAOe,IAIE,SAASwB,IAAmB,IAAAC,EACfC,qBAAWR,EAAa,IADTS,EAAA5D,OAAA0B,EAAA,EAAA1B,CAAA0D,EAAA,GAClCG,EADkCD,EAAA,GAC3BE,EAD2BF,EAAA,GAGzC,OACEjE,EAAAC,EAAAC,cAAC8C,EAAD,KACEhD,EAAAC,EAAAC,cAACkE,EAAD,CACE/C,UAAW6C,EACXrE,aAAc,SAAAiB,GAAE,OAAIqD,EAAS,CAAEvD,KAAM,cAAeE,QACpDhB,mBAAoB,SAAAgB,GAAE,OAAIqD,EAAS,CAAEvD,KAAM,WAAYE,UAEzDd,EAAAC,EAAAC,cAACwB,EAAD,CAAUC,UAAW,SAAA0C,GAAY,OAAIF,EAAS,CAAEvD,KAAM,WAAYgD,QAAS,CAAE9C,GAAIwC,EAAQgB,WAAY5D,KAAM2D,EAActE,WAAW,SCxB3HwE,MARf,WACE,OACEvE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAC4D,EAAD,QCMcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8FCPNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70318374.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  MDBListGroupItem, MDBCol, MDBRow, MDBIcon,\n} from 'mdbreact';\nimport Checkbox from '@material/react-checkbox';\n\nconst getItemStyles = (isCompleted) => {\n  if (isCompleted) {\n    return {\n      backgroundColor: '#bbb',\n      opacity: '0.5',\n      marginTop: '1.5em',\n    };\n  }\n  return {\n    marginTop: '1.5em',\n  };\n};\n\nexport default function TodoItem({ todoItem, onRemoveItem, onSetItemCompleted }) {\n  const isCompleted = todoItem.completed;\n\n  return (\n    <MDBListGroupItem style={{ ...getItemStyles(isCompleted) }}>\n      <MDBRow>\n        <MDBCol className=\"todo_items_left\" size=\"10\" middle>\n          {todoItem.text}\n        </MDBCol>\n        <MDBCol size=\"2\" className=\"todo_items_right\">\n          <Checkbox type=\"checkbox\" onClick={() => onSetItemCompleted(todoItem.id)} disabled={isCompleted} />\n          <MDBIcon\n            size=\"2x\"\n            className=\"red-text remove_icon\"\n            label=\"delete\"\n            name=\"delete\"\n            aria-label=\"Remove\"\n            onClick={() => onRemoveItem(todoItem.id)}\n            icon=\"trash\"\n          />\n        </MDBCol>\n      </MDBRow>\n    </MDBListGroupItem>\n  );\n}\n\nTodoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    id: PropTypes.string,\n    text: PropTypes.string,\n    completed: PropTypes.bool,\n  }),\n  onRemoveItem: PropTypes.func.isRequired,\n  onSetItemCompleted: PropTypes.func.isRequired,\n};\n\nTodoItem.defaultProps = {\n  todoItem: {},\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListGroup } from 'mdbreact';\nimport TodoItem from '../TodoItem/TodoItem';\n\nfunction TodoList({ todoItems, onRemoveItem, onSetItemCompleted }) {\n  return (\n    <ListGroup>\n      {todoItems.map(item => (\n        <TodoItem\n          key={item.id}\n          todoItem={item}\n          onRemoveItem={onRemoveItem}\n          onSetItemCompleted={onSetItemCompleted}\n        />\n      )) }\n    </ListGroup>\n  );\n}\n\nTodoList.propTypes = {\n  todoItems: PropTypes.arrayOf(PropTypes.shape({\n    todoTextValue: PropTypes.string,\n  })),\n  onRemoveItem: PropTypes.func.isRequired,\n  onSetItemCompleted: PropTypes.func.isRequired,\n};\nTodoList.defaultProps = {\n  todoItems: [],\n};\n\nexport default TodoList;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { MDBBtn, MDBIcon, MDBInput } from 'mdbreact';\n\n\nexport default function TodoForm({ onAddItem }) {\n  const [todoText, setTodoText] = useState('');\n  const inputEl = useRef(null);\n\n  const submitForm = (text) => {\n    if (text !== '') {\n      onAddItem(text);\n      setTodoText('');\n      if (inputEl.current) inputEl.current.state.innerValue = '';\n    }\n  };\n\n  const handleKey = (e) => {\n    if (e.which === 13) {\n      submitForm(todoText);\n    }\n  };\n\n  return (\n    <div>\n      <MDBInput\n        onKeyPress={handleKey}\n        size=\"lg\"\n        ref={inputEl}\n        label=\"Add Tasks\"\n        onChange={e => setTodoText(e.target.value)}\n        className=\"todo_form\"\n      />\n      <MDBBtn className=\"btn_circle\" color=\"pink\" aria-label=\"Add\" onClick={() => submitForm(todoText)} type=\"submit\">\n        <MDBIcon icon=\"plus\" size=\"2x\" />\n      </MDBBtn>\n    </div>\n  );\n}\nTodoForm.propTypes = {\n  onAddItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport {\n  MDBNavbar, MDBContainer, MDBCol, MDBNavbarBrand,\n} from 'mdbreact';\n\nexport default function AppLayout(props) {\n  return (\n    <>\n      <MDBNavbar color=\"indigo\" dark expand=\"md\">\n        <MDBContainer>\n          <MDBCol size=\"6\">\n            <MDBNavbarBrand>\n              <h1 className=\"title\">Todo List</h1>\n            </MDBNavbarBrand>\n          </MDBCol>\n        </MDBContainer>\n      </MDBNavbar>\n      <MDBContainer>\n        <MDBCol className=\"todo_list\">\n          {props.children}\n        </MDBCol>\n      </MDBContainer>\n    </>\n  );\n}\n","import React, { useReducer } from 'react';\nimport TodoList from '../../components/TodoList/TodoList';\nimport TodoForm from '../../components/TodoForm/TodoForm';\nimport AppLayout from '../../AppLayout';\n\nconst shortid = require('shortid');\n\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, action.payload];\n    case 'REMOVE_TODO':\n      return state.filter(item => item.id !== action.id);\n    case 'SET_DONE':\n      return state.map((item) => {\n        if (item.id === action.id) {\n          return { ...item, completed: true };\n        }\n        return item;\n      });\n    default:\n      return state;\n  }\n};\n\nexport default function TodoAppContainer() {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n\n  return (\n    <AppLayout>\n      <TodoList\n        todoItems={todos}\n        onRemoveItem={id => dispatch({ type: 'REMOVE_TODO', id })}\n        onSetItemCompleted={id => dispatch({ type: 'SET_DONE', id })}\n      />\n      <TodoForm onAddItem={todoItemText => dispatch({ type: 'ADD_TODO', payload: { id: shortid.generate(), text: todoItemText, completed: false } })} />\n    </AppLayout>\n  );\n}\n","import React from 'react';\nimport TodoAppContainer from './containers/TodoAppContainer/TodoAppContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoAppContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport '@material/react-checkbox/dist/checkbox.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}